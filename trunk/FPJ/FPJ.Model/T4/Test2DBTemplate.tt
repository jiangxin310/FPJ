<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ output extension=".cs" #>
<#@ include file="include/References.ttinclude" #>
<#@ include file="include/Manager.ttinclude" #>
<#@ include file="include/DbHelper.ttinclude" #>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using DapperExtensions.Mapper;
<#      
	string database="Test2";  //数据库
	#>
namespace FPJ.Model.<#=database#>
{   
<# manager.EndBlock(); #>

<#      
    string connectionString=string.Format(@"Data Source=.;Persist Security Info=True;Initial Catalog={0};User ID=sa;Password=123;",database);        
	
	var tables=DbHelper.GetDbTables(connectionString,database);

    foreach(DbTable tb in tables)
    {    
		string tableName=tb.TableName;
		Dictionary<string,bool>  keyColumnDic=new Dictionary<string,bool>();
        manager.StartNewFile(tableName+".cs");
#>
		 /// <summary>
		///实体-<#=tableName#> 
		/// <summary>
		public partial class <#=tableName#>
		{
			<#var columns=DbHelper.GetDbColumns(connectionString,database,tableName);
			foreach (DbColumn dc in columns){#>

				 /// <summary>
				/// <#=dc.Remark#> 
				/// </summary>
				public <#=dc.CSharpType#> <#=dc.IsNullable&&dc.CSharpType.ToLower()!="string"?"?":""#> <#=dc.ColumnName#> {get;set;}
				<#if(dc.IsPrimaryKey){keyColumnDic.Add(dc.ColumnName,dc.IsIdentity);}
				}#>
				
		}
	
		public partial class <#=tableName#>Mapper:ClassMapper<<#=tableName#>>
		{
			public <#=tableName#>Mapper()
			{
        <#foreach (var item in keyColumnDic)
          {#>
			Map(a=>a.<#=item.Key#>).Key(KeyType.<#=(item.Value?"Identity":"Assigned")#>);
          <#}#>
			AutoMap();
			}
		}
<#
        manager.EndBlock();    
    }            
#>

<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>